# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OlNojhoV37S8lfoRYAq-U5xvF2dxLRHB
"""

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

G = nx.Graph()
G2=nx.Graph()
with open("dataset.txt", "r") as file:
    for line in file:
        node1, node2 = line.strip().split()  # Assuming nodes are separated by space
        G.add_edge(node1, node2)
with open("dataset2.txt", "r") as file:
    for line in file:
        node1, node2 = line.strip().split()  # Assuming nodes are separated by space
        G2.add_edge(node1, node2)

degrees = [deg for node, deg in G.degree()]
degrees2 = [deg for node, deg in G2.degree()]

max_degree = max(degrees)
min_degree = min(degrees)
avg_degree = np.mean(degrees)
std_dev_degree = np.std(degrees)
max_degree2 = max(degrees2)
min_degree2 = min(degrees2)
avg_degree2 = np.mean(degrees2)
std_dev_degree2 = np.std(degrees2)

print("Max Degree of dataset 1:", max_degree)
print("Min Degree of dataset 1:", min_degree)
print("Average Degree of dataset 1:", avg_degree)
print("Standard Deviation of Degree of dataset 1:", std_dev_degree)
print("Max Degree of dataset 2:", max_degree2)
print("Min Degree of dataset 2:", min_degree2)
print("Average Degree of dataset 2:", avg_degree2)
print("Standard Deviation of Degree of dataset 2:", std_dev_degree2)

plt.hist(degrees, bins=20)
plt.title("Degree Distribution of dataset1")
plt.xlabel("Degree")
plt.ylabel("Frequency")
plt.show()
plt.hist(degrees2)
plt.title("Degree Distribution of dataset2")
plt.xlabel("Degree")
plt.ylabel("Frequency")
plt.show()

degree_centrality = nx.degree_centrality(G)
degree_centrality2 = nx.degree_centrality(G2)

eigenvector_centrality = nx.eigenvector_centrality(G)
eigenvector_centrality2 = nx.eigenvector_centrality(G2, max_iter=10000, tol=1e-6)

katz_centrality = nx.katz_centrality(G, 0.1,0.1)
katz_centrality2 = nx.katz_centrality(G2, 0.1,0.1)

pagerank_centrality = nx.pagerank(G)
pagerank_centrality2 = nx.pagerank(G2)
# Local and Global Clustering Coefficients
local_clustering_coefficient = nx.clustering(G)
global_clustering_coefficient = nx.average_clustering(G)
local_clustering_coefficient2 = nx.clustering(G2)
global_clustering_coefficient2 = nx.average_clustering(G2)
# Betweenness Centrality
betweenness_centrality = nx.betweenness_centrality(G)
betweenness_centrality2 = nx.betweenness_centrality(G2)
# Closeness Centrality
closeness_centrality = nx.closeness_centrality(G)
closeness_centrality2 = nx.closeness_centrality(G2)
# Reciprocity
reciprocity = nx.reciprocity(G)
reciprocity2 = nx.reciprocity(G2)
# Transitivity
transitivity = nx.transitivity(G)
transitivity2 = nx.transitivity(G2)

print("Degree Centrality of dataset1:", degree_centrality)
print("Eigenvector Centrality of dataset1:", eigenvector_centrality)
print("Katz Centrality of dataset1:", katz_centrality)
print("PageRank Centrality of dataset1:", pagerank_centrality)
print("Local Clustering Coefficients of dataset1:", local_clustering_coefficient)
print("Global Clustering Coefficient of dataset1:", global_clustering_coefficient)
print("Betweenness Centrality of dataset1:", betweenness_centrality)
print("Closeness Centrality of dataset1:", closeness_centrality)
print("Reciprocity of dataset1:", reciprocity)
print("Transitivity of dataset1:", transitivity)

print("Degree Centrality of dataset2:", degree_centrality2)
print("Eigenvector Centrality of dataset2:", eigenvector_centrality2)
print("Katz Centrality of dataset2:", katz_centrality2)
print("PageRank Centrality of dataset2:", pagerank_centrality2)
print("Local Clustering Coefficients of dataset2:", local_clustering_coefficient2)
print("Global Clustering Coefficient of dataset2:", global_clustering_coefficient2)
print("Betweenness Centrality of dataset2:", betweenness_centrality2)
print("Closeness Centrality of dataset2:", closeness_centrality2)
print("Reciprocity of dataset2:", reciprocity2)
print("Transitivity of dataset2:", transitivity2)

fig, axs = plt.subplots(2, 1, figsize=(12, 10))
axs[0].bar(np.arange(len(degree_centrality)), degree_centrality.values(), align='center', label='Degree Centrality', color='b')
axs[0].bar(np.arange(len(eigenvector_centrality)), eigenvector_centrality.values(), align='center', label='Eigenvector Centrality', color='g')
axs[0].bar(np.arange(len(pagerank_centrality)), pagerank_centrality.values(), align='center', label='PageRank Centrality', color='r')
axs[0].bar(np.arange(len(katz_centrality)), katz_centrality.values(), align='center', label='Katz Centrality', color='y')
axs[0].bar(np.arange(len(betweenness_centrality)), betweenness_centrality.values(), align='center', label='Betweenness Centrality', color='purple')
axs[0].bar(np.arange(len(closeness_centrality)), closeness_centrality.values(), align='center', label='Closeness Centrality', color='orange')
axs[0].set_xticks([])
axs[0].set_ylabel('Centrality')
axs[0].legend()
axs[0].set_title('Centrality Measures of dataset1')

# Plot clustering coefficients
axs[1].bar(np.arange(len(local_clustering_coefficient)), local_clustering_coefficient.values(), align='center', label='Local Clustering Coefficient', color='c')
axs[1].axhline(global_clustering_coefficient, color='m', linestyle='--', label='Global Clustering Coefficient')
axs[1].set_xticks([])
axs[1].set_ylabel('Clustering Coefficient')
axs[1].legend()
axs[1].set_title('Clustering Coefficients of dataset1')

plt.tight_layout()
plt.show()

fig, axs = plt.subplots(2, 1, figsize=(12, 10))
axs[0].bar(np.arange(len(degree_centrality2)), degree_centrality2.values(), align='center', label='Degree Centrality', color='b')
axs[0].bar(np.arange(len(eigenvector_centrality2)), eigenvector_centrality2.values(), align='center', label='Eigenvector Centrality', color='g')
axs[0].bar(np.arange(len(pagerank_centrality2)), pagerank_centrality2.values(), align='center', label='PageRank Centrality', color='r')
axs[0].bar(np.arange(len(katz_centrality2)), katz_centrality2.values(), align='center', label='Katz Centrality', color='y')
axs[0].bar(np.arange(len(betweenness_centrality2)), betweenness_centrality2.values(), align='center', label='Betweenness Centrality', color='purple')
axs[0].bar(np.arange(len(closeness_centrality2)), closeness_centrality2.values(), align='center', label='Closeness Centrality', color='orange')
axs[0].set_xticks([])
axs[0].set_ylabel('Centrality')
axs[0].legend()
axs[0].set_title('Centrality Measures of dataset2')

# Plot clustering coefficients
axs[1].bar(np.arange(len(local_clustering_coefficient2)), local_clustering_coefficient2.values(), align='center', label='Local Clustering Coefficient', color='c')
axs[1].axhline(global_clustering_coefficient2, color='m', linestyle='--', label='Global Clustering Coefficient')
axs[1].set_xticks([])
axs[1].set_ylabel('Clustering Coefficient')
axs[1].legend()
axs[1].set_title('Clustering Coefficients of dataset2')

plt.tight_layout()
plt.show()

import pandas as pd

# Convert centrality measures and clustering coefficients to pandas DataFrames
degree_df = pd.DataFrame.from_dict(degree_centrality, orient='index', columns=['Degree Centrality']).sort_values(by='Degree Centrality', ascending=False).head(10)
eigenvector_df = pd.DataFrame.from_dict(eigenvector_centrality, orient='index', columns=['Eigenvector Centrality']).sort_values(by='Eigenvector Centrality', ascending=False).head(10)
pagerank_df = pd.DataFrame.from_dict(pagerank_centrality, orient='index', columns=['PageRank Centrality']).sort_values(by='PageRank Centrality', ascending=False).head(10)
katz_df = pd.DataFrame.from_dict(katz_centrality, orient='index', columns=['Katz Centrality']).sort_values(by='Katz Centrality', ascending=False).head(10)
betweenness_df = pd.DataFrame.from_dict(betweenness_centrality, orient='index', columns=['Betweenness Centrality']).sort_values(by='Betweenness Centrality', ascending=False).head(10)
closeness_df = pd.DataFrame.from_dict(closeness_centrality, orient='index', columns=['Closeness Centrality']).sort_values(by='Closeness Centrality', ascending=False).head(10)
local_clustering_df = pd.DataFrame.from_dict(local_clustering_coefficient, orient='index', columns=['Local Clustering Coefficient']).sort_values(by='Local Clustering Coefficient', ascending=False).head(10)


degree_df2 = pd.DataFrame.from_dict(degree_centrality2, orient='index', columns=['Degree Centrality']).sort_values(by='Degree Centrality', ascending=False).head(10)
eigenvector_df2 = pd.DataFrame.from_dict(eigenvector_centrality2, orient='index', columns=['Eigenvector Centrality']).sort_values(by='Eigenvector Centrality', ascending=False).head(10)
pagerank_df2 = pd.DataFrame.from_dict(pagerank_centrality2, orient='index', columns=['PageRank Centrality']).sort_values(by='PageRank Centrality', ascending=False).head(10)
katz_df2 = pd.DataFrame.from_dict(katz_centrality2, orient='index', columns=['Katz Centrality']).sort_values(by='Katz Centrality', ascending=False).head(10)
betweenness_df2 = pd.DataFrame.from_dict(betweenness_centrality2, orient='index', columns=['Betweenness Centrality']).sort_values(by='Betweenness Centrality', ascending=False).head(10)
closeness_df2 = pd.DataFrame.from_dict(closeness_centrality2, orient='index', columns=['Closeness Centrality']).sort_values(by='Closeness Centrality', ascending=False).head(10)
local_clustering_df2 = pd.DataFrame.from_dict(local_clustering_coefficient2, orient='index', columns=['Local Clustering Coefficient']).sort_values(by='Local Clustering Coefficient', ascending=False).head(10)

# Display top 10 of each centrality measure and clustering coefficient
print("Top 10 Degree Centrality of dataset1:")
print(degree_df)
print("\nTop 10 Eigenvector Centrality of dataset1:")
print(eigenvector_df)
print("\nTop 10 PageRank Centrality of dataset1:")
print(pagerank_df)
print("\nTop 10 Katz Centrality of dataset1:")
print(katz_df)
print("\nTop 10 Betweenness Centrality of dataset1:")
print(betweenness_df)
print("\nTop 10 Closeness Centrality of dataset1:")
print(closeness_df)
print("\nTop 10 Local Clustering Coefficient of dataset1:")
print(local_clustering_df)
print("\nGlobal Clustering Coefficient of dataset1:")
print(global_clustering_coefficient)

print("Top 10 Degree Centrality of dataset2:")
print(degree_df2)
print("\nTop 10 Eigenvector Centrality of dataset2:")
print(eigenvector_df2)
print("\nTop 10 PageRank Centrality of dataset2:")
print(pagerank_df2)
print("\nTop 10 Katz Centrality of dataset2:")
print(katz_df2)
print("\nTop 10 Betweenness Centrality of dataset2:")
print(betweenness_df2)
print("\nTop 10 Closeness Centrality of dataset2:")
print(closeness_df2)
print("\nTop 10 Local Clustering Coefficient of dataset2:")
print(local_clustering_df2)
print("\nGlobal Clustering Coefficient of dataset2:")
print(global_clustering_coefficient2)

plt.figure(figsize=(10, 6))
plt.hist(degree_centrality.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(degree_centrality2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('Degree Centrality')
plt.ylabel('Frequency')
plt.title('Comparison of Degree Centrality')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(eigenvector_centrality.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(eigenvector_centrality2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('Eigenvector Centrality')
plt.ylabel('Frequency')
plt.title('Comparison of Eigenvector Centrality')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(pagerank_centrality.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(pagerank_centrality2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('PageRank Centrality')
plt.ylabel('Frequency')
plt.title('Comparison of PageRank Centrality')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(katz_centrality.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(katz_centrality2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('Katz Centrality')
plt.ylabel('Frequency')
plt.title('Comparison of Katz Centrality')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(betweenness_centrality.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(betweenness_centrality2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('Betweenness Centrality')
plt.ylabel('Frequency')
plt.title('Comparison of Betweenness Centrality')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(closeness_centrality.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(closeness_centrality2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('Closeness Centrality')
plt.ylabel('Frequency')
plt.title('Comparison of Closeness Centrality')
plt.legend()

plt.figure(figsize=(10, 6))
plt.hist(local_clustering_coefficient.values(), alpha=0.5, label='Network 1', color='blue')
plt.hist(local_clustering_coefficient2.values(), alpha=0.5, label='Network 2', color='red')
plt.xlabel('Local Clustering Coefficient')
plt.ylabel('Frequency')
plt.title('Comparison of Local Clustering Coefficient')
plt.legend()
plt.show()

"""ROUND1 ENDED HERE"""

